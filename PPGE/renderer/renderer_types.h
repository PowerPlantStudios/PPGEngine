#pragma once
#include "PPGEpch.h"

#include "core/defines.h"
#include "core/ppge_enum.h"

namespace PPGE
{
enum class UsageType : uint8_t
{
    USAGE_DEFAULT = 0,
    USAGE_IMMUTABLE = 1,
    USAGE_DYNAMIC = 2,
    USAGE_STAGING = 3,
    COUNT
};

enum class CPUAccessFlags : uint8_t
{
    CPU_ACCESS_NONE = 0,
    CPU_ACCESS_READ = 1 << 0,
    CPU_ACCESS_WRITE = 1 << 1
};
PPGE_ENUM_OPERATORS(CPUAccessFlags);

enum class BindFlags : uint16_t
{
    BIND_NONE = 0,
    BIND_VERTEX_BUFFER = 1 << 0,
    BIND_INDEX_BUFFER = 1 << 1,
    BIND_CONSTANT_BUFFER = 1 << 2,
    BIND_SHADER_RESOURCE = 1 << 3,
    BIND_STREAM_OUTPUT = 1 << 4,
    BIND_RENDER_TARGET = 1 << 5,
    BIND_DEPTH_STENCIL = 1 << 6,
    BIND_UNORDERED_ACCESS = 1 << 7
};
PPGE_ENUM_OPERATORS(BindFlags);

enum class ShaderTypeFlags : uint16_t
{
    SHADER_TYPE_UNKNOW = 0,
    SHADER_TYPE_VERTEX = 1 << 0,
    SHADER_TYPE_PIXEL = 1 << 1,
    SHADER_TYPE_GEOMETRY = 1 << 2,
    SHADER_TYPE_HULL = 1 << 3,
    SHADER_TYPE_DOMAIN = 1 << 4,
    SHADER_TYPE_COMPUTE = 1 << 5,
    SHADER_TYPE_AMPLIFICATION = 1 << 6,
    SHADER_TYPE_MESH = 1 << 7,
    SHADER_TYPE_RAY_GEN = 1 << 8,
    SHADER_TYPE_RAY_MISS = 1 << 9,
    SHADER_TYPE_RAY_CLOSEST_HIT = 1 << 10,
    SHADER_TYPE_RAY_ANY_HIT = 1 << 11,
    SHADER_TYPE_RAY_INTERSECTION = 1 << 12,
    SHADER_TYPE_CALLABLE = 1 << 13,
    SHADER_TYPE_ALL_GFX =
        SHADER_TYPE_VERTEX | SHADER_TYPE_PIXEL | SHADER_TYPE_GEOMETRY | SHADER_TYPE_HULL | SHADER_TYPE_DOMAIN,
    SHADER_TYPE_ALL_MESH = SHADER_TYPE_AMPLIFICATION | SHADER_TYPE_MESH | SHADER_TYPE_PIXEL,
    SHADER_TYPE_ALL_RTX = SHADER_TYPE_RAY_GEN | SHADER_TYPE_RAY_MISS | SHADER_TYPE_RAY_CLOSEST_HIT |
                          SHADER_TYPE_RAY_ANY_HIT | SHADER_TYPE_RAY_INTERSECTION | SHADER_TYPE_CALLABLE
};
PPGE_ENUM_OPERATORS(ShaderTypeFlags);

enum class ShaderLanguageType : uint8_t
{
    SHADER_LANGUAGE_DEFAULT = 0,
    SHADER_LANGUAGE_HLSL,
    SHADER_LANGUAGE_GLSL,
    SHADER_LANGUAGE_MSL,
    COUNT
};

enum class ShaderCompilerType : uint8_t
{
    SHADER_COMPILER_DEFAULT = 0,
    SHADER_COMPILER_DXC,
    SHADER_COMPILER_FXC,
    SHADER_COMPILER_GLSL
};

enum class ShaderResourceType : uint8_t
{
    SHADER_RESOURCE_UNKNOWN = 0,
    SHADER_RESOURCE_CONSTANT_BUFFER,
    SHADER_RESOURCE_TEXTURE_SRV,
    SHADER_RESOURCE_SAMPLER
};

enum class PipelineType : uint8_t
{
    PIPELINE_UNKNOWN = 0,
    PIPELINE_GRAPHICS,
    PIPELINE_COMPUTE,
    PIPELINE_RAYTRACING
};

enum class MapType : uint8_t
{
    MAP_READ = 0,
    MAP_WRITE,
    MAP_READ_WRITE
};

enum class MapFlags : uint8_t
{
    MAP_NONE = 0,
    MAP_DO_NOT_WAIT = 1 << 0,
    MAP_DISCARD = 1 << 1,
    MAP_NO_OVERWRITE = 1 << 2
};
PPGE_ENUM_OPERATORS(MapFlags);

enum class ResourceDimensionType : uint8_t
{
    RESOURCE_DIMENSION_UNDEFINED = 0,
    RESOURCE_DIMENSION_1D,
    RESOURCE_DIMENSION_1D_ARRAY,
    RESOURCE_DIMENSION_2D,
    RESOURCE_DIMENSION_2D_ARRAY,
    RESOURCE_DIMENSION_3D,
    RESOURCE_DIMENSION_CUBE,
    RESOURCE_DIMENSION_CUBE_ARRAY
};

enum class ResourceViewType : uint8_t
{
    RESOURCE_VIEW_UNDEFINED = 0,
    RESOURCE_VIEW_SHADER_RESOURCE,
    RESOURCE_VIEW_RENDER_TARGET,
    RESOURCE_VIEW_DEPTH_STENCIL
};

enum class TextureFormatType : uint16_t
{
    TEXTURE_FORMAT_UNKNOWN = 0,

    TEXTURE_FORMAT_R32G32B32A32_TYPELESS,
    TEXTURE_FORMAT_R32G32B32A32_FLOAT,
    TEXTURE_FORMAT_R32G32B32A32_UINT,
    TEXTURE_FORMAT_R32G32B32A32_SINT,

    TEXTURE_FORMAT_R32G32B32_TYPELESS,
    TEXTURE_FORMAT_R32G32B32_FLOAT,
    TEXTURE_FORMAT_R32G32B32_UINT,
    TEXTURE_FORMAT_R32G32B32_SINT,

    TEXTURE_FORMAT_R16G16B16A16_TYPELESS,
    TEXTURE_FORMAT_R16G16B16A16_FLOAT,
    TEXTURE_FORMAT_R16G16B16A16_UNORM,
    TEXTURE_FORMAT_R16G16B16A16_UINT,
    TEXTURE_FORMAT_R16G16B16A16_SNORM,
    TEXTURE_FORMAT_R16G16B16A16_SINT,

    TEXTURE_FORMAT_R32G32_TYPELESS,
    TEXTURE_FORMAT_R32G32_FLOAT,
    TEXTURE_FORMAT_R32G32_UINT,
    TEXTURE_FORMAT_R32G32_SINT,

    TEXTURE_FORMAT_R32G8X24_TYPELESS,
    TEXTURE_FORMAT_D32_FLOAT_S8X24_UINT,
    TEXTURE_FORMAT_R32_FLOAT_X8X24_TYPELESS,
    TEXTURE_FORMAT_X32_TYPELESS_G8X24_UINT,

    TEXTURE_FORMAT_R10G10B10A2_TYPELESS,
    TEXTURE_FORMAT_R10G10B10A2_UNORM,
    TEXTURE_FORMAT_R10G10B10A2_UINT,

    TEXTURE_FORMAT_R11G11B10_FLOAT,

    TEXTURE_FORMAT_R8G8B8A8_TYPELESS,
    TEXTURE_FORMAT_R8G8B8A8_UNORM,
    TEXTURE_FORMAT_R8G8B8A8_UNORM_SRGB,
    TEXTURE_FORMAT_R8G8B8A8_UINT,
    TEXTURE_FORMAT_R8G8B8A8_SNORM,
    TEXTURE_FORMAT_R8G8B8A8_SINT,

    TEXTURE_FORMAT_R16G16_TYPELESS,
    TEXTURE_FORMAT_R16G16_FLOAT,
    TEXTURE_FORMAT_R16G16_UNORM,
    TEXTURE_FORMAT_R16G16_UINT,
    TEXTURE_FORMAT_R16G16_SNORM,
    TEXTURE_FORMAT_R16G16_SINT,

    TEXTURE_FORMAT_R32_TYPELESS,
    TEXTURE_FORMAT_D32_FLOAT,
    TEXTURE_FORMAT_R32_FLOAT,
    TEXTURE_FORMAT_R32_UINT,
    TEXTURE_FORMAT_R32_SINT,

    TEXTURE_FORMAT_R24G8_TYPELESS,
    TEXTURE_FORMAT_D24_UNORM_S8_UINT,
    TEXTURE_FORMAT_R24_UNORM_X8_TYPELESS,
    TEXTURE_FORMAT_X24_TYPELESS_G8_UINT,

    TEXTURE_FORMAT_R8G8_TYPELESS,
    TEXTURE_FORMAT_R8G8_UNORM,
    TEXTURE_FORMAT_R8G8_UINT,
    TEXTURE_FORMAT_R8G8_SNORM,
    TEXTURE_FORMAT_R8G8_SINT,

    TEXTURE_FORMAT_R16_TYPELESS,
    TEXTURE_FORMAT_R16_FLOAT,
    TEXTURE_FORMAT_D16_UNORM,
    TEXTURE_FORMAT_R16_UNORM,
    TEXTURE_FORMAT_R16_UINT,
    TEXTURE_FORMAT_R16_SNORM,
    TEXTURE_FORMAT_R16_SINT,

    TEXTURE_FORMAT_R8_TYPELESS,
    TEXTURE_FORMAT_R8_UNORM,
    TEXTURE_FORMAT_R8_UINT,
    TEXTURE_FORMAT_R8_SNORM,
    TEXTURE_FORMAT_R8_SINT,
    TEXTURE_FORMAT_A8_UNORM,
    TEXTURE_FORMAT_R1_UNORM,

    TEXTURE_FORMAT_R9G9B9E5_SHAREDEXP,
    TEXTURE_FORMAT_R8G8_B8G8_UNORM,
    TEXTURE_FORMAT_G8R8_G8B8_UNORM,

    TEXTURE_FORMAT_BC1_TYPELESS,
    TEXTURE_FORMAT_BC1_UNORM,
    TEXTURE_FORMAT_BC1_UNORM_SRGB,

    TEXTURE_FORMAT_BC2_TYPELESS,
    TEXTURE_FORMAT_BC2_UNORM,
    TEXTURE_FORMAT_BC2_UNORM_SRGB,

    TEXTURE_FORMAT_BC3_TYPELESS,
    TEXTURE_FORMAT_BC3_UNORM,
    TEXTURE_FORMAT_BC3_UNORM_SRGB,

    TEXTURE_FORMAT_BC4_TYPELESS,
    TEXTURE_FORMAT_BC4_UNORM,
    TEXTURE_FORMAT_BC4_SNORM,

    TEXTURE_FORMAT_BC5_TYPELESS,
    TEXTURE_FORMAT_BC5_UNORM,
    TEXTURE_FORMAT_BC5_SNORM,

    TEXTURE_FORMAT_B5G6R5_UNORM,

    TEXTURE_FORMAT_B5G5R5A1_UNORM,

    TEXTURE_FORMAT_B8G8R8A8_UNORM,

    TEXTURE_FORMAT_B8G8R8X8_UNORM,

    TEXTURE_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,

    TEXTURE_FORMAT_B8G8R8A8_TYPELESS,
    TEXTURE_FORMAT_B8G8R8A8_UNORM_SRGB,

    TEXTURE_FORMAT_B8G8R8X8_TYPELESS,
    TEXTURE_FORMAT_B8G8R8X8_UNORM_SRGB,

    TEXTURE_FORMAT_BC6H_TYPELESS,
    TEXTURE_FORMAT_BC6H_UF16,
    TEXTURE_FORMAT_BC6H_SF16,

    TEXTURE_FORMAT_BC7_TYPELESS,
    TEXTURE_FORMAT_BC7_UNORM,
    TEXTURE_FORMAT_BC7_UNORM_SRGB,

    TEXTURE_FORMAT_AYUV,
    TEXTURE_FORMAT_Y410,
    TEXTURE_FORMAT_Y416,
    TEXTURE_FORMAT_NV12,
    TEXTURE_FORMAT_P010,
    TEXTURE_FORMAT_P016,

    TEXTURE_FORMAT_420_OPAQUE,

    TEXTURE_FORMAT_YUY2,
    TEXTURE_FORMAT_Y210,
    TEXTURE_FORMAT_Y216,

    TEXTURE_FORMAT_NV11,
    TEXTURE_FORMAT_AI44,
    TEXTURE_FORMAT_IA44,
    TEXTURE_FORMAT_P8,
    TEXTURE_FORMAT_A8P8,
    TEXTURE_FORMAT_B4G4R4A4_UNORM,

    TEXTURE_FORMAT_P208,
    TEXTURE_FORMAT_V208,
    TEXTURE_FORMAT_V408,
};

enum class SwapChainUsageFlags : uint8_t
{
    SWAP_CHAIN_USAGE_UNDEFINED = 0,
    SWAP_CHAIN_USAGE_RENDER_TARGET_OUTPUT = 1 << 0,
    SWAP_CHAIN_USAGE_SHADER_INPUT = 1 << 1,
    SWAP_CHAIN_USAGE_BACK_BUFFER = 1 << 2
};
PPGE_ENUM_OPERATORS(SwapChainUsageFlags);
} // namespace PPGE